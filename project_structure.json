{
    "docker-compose.yml": "version: '3.8'\n\nservices:\n  backend:\n    build: ./backend\n    command: gunicorn backend.wsgi:application --bind 0.0.0.0:8000\n    volumes:\n      - ./backend:/backend\n      - static_volume:/backend/static # Define a volume for static files\n    ports:\n      - '8000:8000'\n    environment:\n      - DEBUG=${DEBUG} # Set to 1 in development\n      - SECRET_KEY=${SECRET_KEY}\n      # Add other environment variables here\n      - DATABASE_URL=${DATABASE_URL}\n      - POSTGRES_USER=${POSTGRES_USER}\n      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}\n      - POSTGRES_DB=${POSTGRES_DB}\n    #  env_file: #uncomment if needed to run docker locally\n    #    - ./.env\n    depends_on:\n      - db\n  db:\n    image: postgres:12\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\n    environment:\n      - POSTGRES_USER=${POSTGRES_USER}\n      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}\n      - POSTGRES_DB=${POSTGRES_DB}\n\n  frontend:\n    build: ./frontend\n    volumes:\n      - ./frontend:/frontend\n      - static_volume:/usr/share/nginx/html/static # Use the same volume for Nginx\n    ports:\n      - '3000:80'\n    environment:\n      - NODE_ENV=production\n      - POSTGRES_USER=${POSTGRES_USER}\n      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}\n      - POSTGRES_DB=${POSTGRES_DB}\n    command: /bin/sh -c \"dockerize -wait tcp://backend:8000 -timeout 1m nginx -g 'daemon off;'\"\n\nvolumes:\n  postgres_data:\n  static_volume:\n",
    ".eslintrc.js": "module.exports = {\n  parser: '@typescript-eslint/parser', // Specifies the ESLint parser\n  extends: [\n    'plugin:react/recommended', // Uses the recommended rules from @eslint-plugin-react\n    'plugin:@typescript-eslint/recommended', // Uses the recommended rules from @typescript-eslint/eslint-plugin\n    'prettier/@typescript-eslint', // Uses eslint-config-prettier to disable ESLint rules from @typescript-eslint/eslint-plugin that would conflict with prettier\n    'plugin:prettier/recommended', // Enables eslint-plugin-prettier and displays prettier errors as ESLint errors. Make sure this is always the last configuration in the extends array.\n  ],\n  parserOptions: {\n    ecmaVersion: 2020, // Allows for the parsing of modern ECMAScript features\n    sourceType: 'module', // Allows for the use of imports\n    ecmaFeatures: {\n      jsx: true, // Allows for the parsing of JSX\n    },\n  },\n  rules: {\n    // Place to specify ESLint rules. Can be used to overwrite rules specified from the extended configs\n    // e.g. \"@typescript-eslint/explicit-function-return-type\": \"off\",\n  },\n  settings: {\n    react: {\n      version: 'detect', // Tells eslint-plugin-react to automatically detect the version of React to use\n    },\n  },\n};\n",
    "export.py": "import json\nimport os\n\ndef list_files(directory, extensions, exclude):\n    \"\"\"\n    List all files in a directory structure, skipping specified directories.\n    Only files with the given extensions are listed.\n    \"\"\"\n    file_structure = {}\n    for root, dirs, files in os.walk(directory, topdown=True):\n        # Exclude specified directories\n        dirs[:] = [d for d in dirs if d not in exclude]\n\n        # Add files to the file structure\n        for file in files:\n            if any(file.endswith(ext) for ext in extensions):\n                path = os.path.relpath(os.path.join(root, file), directory)\n                file_structure[path] = None  # Initialize with None; content to be added if required\n\n    return file_structure\n\ndef add_file_content(file_structure, root_directory):\n    \"\"\"\n    Add the content of the files to the file structure dictionary.\n    \"\"\"\n    for file_path in file_structure:\n        try:\n            with open(os.path.join(root_directory, file_path), 'r', encoding='utf-8') as file:\n                file_structure[file_path] = file.read()\n        except Exception as e:\n            print(f\"Error reading file {file_path}: {e}\")\n\ndef main():\n    # Configuration\n    root_directory = '.'  # Start from the current directory\n    relevant_extensions = ('.py', '.js', '.jsx', '.css', '.html', '.txt', '.md', 'Dockerfile', '.yml')\n    directories_to_exclude = {\n        '__pycache__', 'node_modules', '.git', \n        'build', 'dist', 'coverage', 'migrations', \n        'env', 'venv', '.vscode', '.idea', 'static'\n    }\n\n    # List all relevant files\n    file_structure = list_files(root_directory, relevant_extensions, directories_to_exclude)\n\n    # Uncomment the next line if you want to include the content of the files in the JSON\n    add_file_content(file_structure, root_directory)\n\n    # Export the file structure to a JSON file\n    json_filename = 'project_structure.json'\n    with open(json_filename, 'w', encoding='utf-8') as json_file:\n        json.dump(file_structure, json_file, indent=4)\n\n    print(f\"Project structure has been saved to {json_filename}\")\n\nif __name__ == \"__main__\":\n    main()",
    "backend/Dockerfile": "# Use the official Python runtime as a parent image\nFROM python:3.9-slim\n\n# Prevent Python from writing pyc files to disc\nENV PYTHONDONTWRITEBYTECODE 1\n\n# Prevent Python from buffering stdout and stderr\nENV PYTHONUNBUFFERED 1\n\n# Set the working directory in the container to /backend\nWORKDIR /backend\n\n# Install dependencies\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy the current directory contents into the container at /backend\nCOPY . .\n\n# Make port 8000 available to the world outside this container\nEXPOSE 8000\n\n# Define the command to run your app using gunicorn\nCMD [\"gunicorn\", \"--bind\", \"0.0.0.0:8000\", \"wsgi:application\"]\n\n#test",
    "backend/manage.py": "#!/usr/bin/env python3\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n",
    "backend/requirements.txt": "amqp==5.2.0\nasgiref==3.7.2\nasync-timeout==4.0.3\nbilliard==4.2.0\ncelery==5.3.6\nclick==8.1.7\nclick-didyoumean==0.3.0\nclick-plugins==1.1.1\nclick-repl==0.3.0\nDjango==4.2.7\ndjango-redis==5.4.0\ndjangorestframework==3.14.0\ngunicorn==21.2.0\nkombu==5.3.4\npackaging==23.2\nprompt-toolkit==3.0.41\npsycopg2-binary==2.9.9\npython-dateutil==2.8.2\npytz==2023.3.post1\nredis==5.0.1\nsix==1.16.0\nsqlparse==0.4.4\ntyping_extensions==4.8.0\ntzdata==2023.3\nvine==5.1.0\nwcwidth==0.2.12\n",
    "backend/backend/__init__.py": "from .celery import app as celery_app\n\n__all__ = ('celery_app',)\n",
    "backend/backend/celery.py": "from __future__ import absolute_import, unicode_literals\nimport os\nfrom celery import Celery\n\n# Set the default Django settings module for the 'celery' program.\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')\n\napp = Celery('backend')\n\n# Using a string here means the worker doesn't have to serialize\n# the configuration object to child processes.\napp.config_from_object('django.conf:settings', namespace='CELERY')\n\n# Load task modules from all registered Django app configs.\napp.autodiscover_tasks()\n",
    "backend/backend/wsgi.py": "\"\"\"\nWSGI config for backend project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/3.2/howto/deployment/wsgi/\n\"\"\"\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')\n\napplication = get_wsgi_application()\n",
    "backend/backend/settings.py": "\"\"\"\nDjango settings for backend project.\n\nGenerated by 'django-admin startproject' using Django 3.2.12.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/3.2/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/3.2/ref/settings/\n\"\"\"\n\nfrom pathlib import Path\nimport os\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.environ.get('SECRET_KEY')\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.environ.get('DEBUG') == 1\n\nALLOWED_HOSTS = ['myserver.com', 'localhost', '127.0.0.1']\n\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static') # This is where Django will store collected static files\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'app.apps.AppConfig',\n    'rest_framework',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'backend.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'backend.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': os.environ.get('POSTGRES_DB'),\n        'USER': os.environ.get('POSTGRES_USER'),\n        'PASSWORD': os.environ.get('POSTGRES_PASSWORD'),\n        'HOST': 'db',  # Or your PostgreSQL server address\n        'PORT': '5432',\n    }\n}\n\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\n\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\nCACHES = {\n    'default': {\n        'BACKEND': 'django_redis.cache.RedisCache',\n        'LOCATION': 'redis://127.0.0.1:6379/1',  # Or your Redis server address and database number\n        'OPTIONS': {\n            'CLIENT_CLASS': 'django_redis.client.DefaultClient',\n        }\n    }\n}\n\nSESSION_ENGINE = \"django.contrib.sessions.backends.cache\"\nSESSION_CACHE_ALIAS = \"default\"\nCELERY_BROKER_URL = 'redis://127.0.0.1:6379/0'  # Or your Redis server address and database number\nCELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/0'  # Same as above\n",
    "backend/backend/asgi.py": "\"\"\"\nASGI config for backend project.\n\nIt exposes the ASGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/3.2/howto/deployment/asgi/\n\"\"\"\n\nimport os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')\n\napplication = get_asgi_application()\n",
    "backend/backend/urls.py": "\"\"\"backend URL Configuration\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/3.2/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.contrib import admin\nfrom django.urls import path\nfrom app import views\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('tasks/', views.task_list, name='task-list'),\n]\n\nif settings.DEBUG:\n    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)",
    "backend/backend/serializers.py": "from rest_framework import serializers\nfrom ..app.models import Task\n\nclass TaskSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Task\n        fields = ['id', 'title', 'description', 'completed']\n",
    "backend/app/__init__.py": "",
    "backend/app/apps.py": "from django.apps import AppConfig\n\n\nclass AppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'app'\n",
    "backend/app/tests.py": "\n\n# Create your tests here.\nfrom django.test import TestCase\nfrom .models import Task\n\nclass TaskModelTest(TestCase):\n    @classmethod\n    def setUpTestData(cls):\n        # Set up non-modified objects used by all test methods\n        Task.objects.create(title='first task', description='a test task', completed=False)\n\n    def test_title_label(self):\n        task = Task.objects.get(id=1)\n        field_label = task._meta.get_field('title').verbose_name\n        self.assertEquals(field_label, 'title')\n\n    def test_completed_default(self):\n        task = Task.objects.get(id=1)\n        self.assertFalse(task.completed)\n",
    "backend/app/views.py": "from django.http import JsonResponse\nfrom .models import Task\n\n# Create your views here.\ndef task_list(request):\n    tasks = Task.objects.all().values('id', 'title', 'description', 'completed')\n    tasks_list = list(tasks)\n    return JsonResponse(tasks_list, safe=False)\n",
    "backend/app/admin.py": "from django.contrib import admin\n\n# Register your models here.\n",
    "backend/app/models.py": "from django.db import models\n\n# Create your models here.\nclass Task(models.Model):\n    title = models.CharField(max_length=100)\n    description = models.TextField()\n    completed = models.BooleanField(default=False)\n\n    def __str__(self):\n        return self.title\n",
    "frontend/Dockerfile": "# Use Node.js version as the parent image\nFROM node:16-alpine as build-stage\n\n# Set the working directory in the container\nWORKDIR /frontend\n\n# Install app dependencies by copying the package.json and package-lock.json\nCOPY package*.json ./\n\n# Install all node dependencies\nRUN npm install\n\n# Bundle app source inside Docker image\nCOPY . .\n\n# Build the app for production\nRUN npm run build\n\n# Use Nginx to serve the React application\nFROM nginx:stable-alpine as production-stage\n\n# Copy the build directory from the previous stage to the Nginx serve folder\nCOPY --from=build-stage /frontend/build /usr/share/nginx/html\n\n# Expose port 80 to the outside once the container has launched\nEXPOSE 80\n\nCOPY nginx.conf /etc/nginx/conf.d/default.conf\n\nENV DOCKERIZE_VERSION v0.6.1\nRUN wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n    && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n    && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz\n\n\n# The default command to run when starting the container\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n\n#test",
    "frontend/README.md": "# Getting Started with Create React App\n\nThis project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).\n\n## Available Scripts\n\nIn the project directory, you can run:\n\n### `npm start`\n\nRuns the app in the development mode.\\\nOpen [http://localhost:3000](http://localhost:3000) to view it in the browser.\n\nThe page will reload if you make edits.\\\nYou will also see any lint errors in the console.\n\n### `npm test`\n\nLaunches the test runner in the interactive watch mode.\\\nSee the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.\n\n### `npm run build`\n\nBuilds the app for production to the `build` folder.\\\nIt correctly bundles React in production mode and optimizes the build for the best performance.\n\nThe build is minified and the filenames include the hashes.\\\nYour app is ready to be deployed!\n\nSee the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.\n\n### `npm run eject`\n\n**Note: this is a one-way operation. Once you `eject`, you can\u2019t go back!**\n\nIf you aren\u2019t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\n\nInstead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you\u2019re on your own.\n\nYou don\u2019t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn\u2019t feel obligated to use this feature. However we understand that this tool wouldn\u2019t be useful if you couldn\u2019t customize it when you are ready for it.\n\n## Learn More\n\nYou can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).\n\nTo learn React, check out the [React documentation](https://reactjs.org/).\n",
    "frontend/src/App.css": ".App {\n  text-align: center;\n}\n\n.App-logo {\n  height: 40vmin;\n  pointer-events: none;\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  .App-logo {\n    animation: App-logo-spin infinite 20s linear;\n  }\n}\n\n.App-header {\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n}\n\n.App-link {\n  color: #61dafb;\n}\n\n@keyframes App-logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n",
    "frontend/src/index.css": "body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n",
    "frontend/public/index.html": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <meta\n      name=\"description\"\n      content=\"Web site created using create-react-app\"\n    />\n    <link rel=\"apple-touch-icon\" href=\"%PUBLIC_URL%/logo192.png\" />\n    <!--\n      manifest.json provides metadata used when your web app is installed on a\n      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/\n    -->\n    <link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\" />\n    <!--\n      Notice the use of %PUBLIC_URL% in the tags above.\n      It will be replaced with the URL of the `public` folder during the build.\n      Only files inside the `public` folder can be referenced from the HTML.\n\n      Unlike \"/favicon.ico\" or \"favicon.ico\", \"%PUBLIC_URL%/favicon.ico\" will\n      work correctly both with client-side routing and a non-root public URL.\n      Learn how to configure a non-root public URL by running `npm run build`.\n    -->\n    <title>React App</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n    <!--\n      This HTML file is a template.\n      If you open it directly in the browser, you will see an empty page.\n\n      You can add webfonts, meta tags, or analytics to this file.\n      The build step will place the bundled scripts into the <body> tag.\n\n      To begin the development, run `npm start` or `yarn start`.\n      To create a production bundle, use `npm run build` or `yarn build`.\n    -->\n  </body>\n</html>\n",
    "frontend/public/robots.txt": "# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n",
    ".github/workflows/ci.yml": "name: Continuous Integration and Deployment\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Set up Docker Compose\n        run: |\n          docker-compose -f docker-compose.yml build\n        env:\n          DEBUG: ${{ secrets.DEBUG }}\n          SECRET_KEY: ${{ secrets.SECRET_KEY }}\n          DATABASE_URL: ${{ secrets.DATABASE_URL }}\n          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}\n          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}\n          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}\n\n      - name: Start the Docker Compose stack\n        run: |\n          docker-compose up -d\n        env:\n          DEBUG: ${{ secrets.DEBUG }}\n          SECRET_KEY: ${{ secrets.SECRET_KEY }}\n          DATABASE_URL: ${{ secrets.DATABASE_URL }}\n          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}\n          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}\n          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}\n\n      - name: Run Django tests\n        run: |\n          docker-compose exec -T backend python manage.py test --verbosity=2\n\n      - name: Shutdown\n        run: |\n          docker-compose down\n"
}